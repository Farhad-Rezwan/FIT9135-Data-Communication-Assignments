node n1 {
    type router
    model static
    network-config {
	hostname R1
	!
	interface eth0
	 ip address 175.189.43.1/24
	!
	interface eth2
	 ip address 175.189.75.1/24
	!
	interface eth1
	 ip address 175.189.5.1/24
	!
    }
    canvas c1
    iconcoords {508.26312583000004 161.08345758366667}
    labelcoords {528.83232934 185.5968797636667}
    interface-peer {eth1 n6}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	# To make R3 as gateway router
	ip route add default via 175.189.43.2
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	# /sbin/ip route add XXXX via YYYY
	
	ip route add 175.189.3.0/24 via 175.189.75.2
	ip route add 175.189.82.0/24 via 175.189.75.2
	ip route add 192.168.192.0/20 via 175.189.43.2
	
	}
    }
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	dirs=('/etc/dhcp', '/var/lib/dhcp', )
	files=('/etc/dhcp/dhcpd.conf', '/var/lib/dhcp/dhcpd.leases', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/var/lib/dhcp/dhcpd.leases
	custom-command /var/lib/dhcp/dhcpd.leases
	config {
	
	
	
	
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	subnet 175.189.5.0 netmask 255.255.255.0 {
	  pool {
	    range 175.189.5.127 175.189.5.254;
	    default-lease-time 600;
	    option routers 175.189.5.1;
	    option domain-name "fit9135";
	    option domain-name-servers 175.189.3.12;
	  }
	}
	
	
	
	}
    }
    services {IPForward DefaultRoute StaticRoute DHCP}
    interface-peer {eth2 n8}
    interface-peer {eth0 n25}
}

node n5 {
    type router
    model static
    network-config {
	hostname R2
	!
	interface eth3
	 ip address 175.189.65.2/24
	!
	interface eth0
	 ip address 175.189.21.1/24
	!
	interface eth1
	 ip address 175.189.82.1/24
	!
    }
    canvas c1
    iconcoords {466.473497805 513.3986142083332}
    labelcoords {487.042701315 537.9120363883334}
    services {IPForward DefaultRoute StaticRoute}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	# To make R3 as gateway router
	ip route add default via 175.189.21.2
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	# /sbin/ip route add XXXX via YYYY
	
	ip route add 175.189.5.0/24 via 175.189.21.2
	ip route add 175.189.3.0/24 via 175.189.21.2
	ip route add 192.168.192.0/24 via 175.189.21.2
	
	}
    }
    interface-peer {eth1 n7}
    interface-peer {eth0 n25}
    interface-peer {eth3 n8}
}

node n6 {
    type lanswitch
    network-config {
	hostname switch1
	!
    }
    canvas c1
    iconcoords {353.574218427 124.362323702}
    labelcoords {369.001121059 142.747390337}
    interface-peer {e0 n1}
    interface-peer {e1 n11}
    interface-peer {e3 n10}
    interface-peer {e2 n12}
    interface-peer {e4 n13}
}

node n7 {
    type lanswitch
    network-config {
	hostname switch3
	!
    }
    canvas c1
    iconcoords {424.666712691 664.799133508}
    labelcoords {440.093615324 683.184200143}
    interface-peer {e3 n18}
    interface-peer {e0 n5}
}

node n10 {
    type router
    model PC
    network-config {
	hostname client1
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {340.852443775 48.7831415584}
    labelcoords {361.421647285 73.2965637382}
    services {DefaultRoute DHCPClient}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    interface-peer {eth0 n6}
}

node n11 {
    type router
    model PC
    network-config {
	hostname client2
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {216.34377939 88.56748797099999}
    labelcoords {236.91298289999997 113.08091015100001}
    services {DefaultRoute DHCPClient}
    interface-peer {eth0 n6}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
}

node n12 {
    type router
    model PC
    network-config {
	hostname client3
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {211.184685628 174.746684683}
    labelcoords {231.75388913799998 199.260106863}
    services {DefaultRoute DHCPClient}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    interface-peer {eth0 n6}
}

node n13 {
    type router
    model PC
    network-config {
	hostname client4
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {461.119583678 39.9212443477}
    labelcoords {481.688787188 64.434666527}
    services {DefaultRoute DHCPClient}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    interface-peer {eth0 n6}
}

node n24 {
    type router
    model host
    network-config {
	hostname dnsserver
	!
	interface eth0
	 ip address 175.189.3.12/24
	!
    }
    canvas c1
    iconcoords {599.314806582 671.640563298}
    labelcoords {619.884010092 696.153985478}
    custom-config {
	custom-config-id service:maradns
	custom-command maradns
	config {
	dirs=('/etc/maradns', )
	files=('/etc/maradns/mararc', '/etc/maradns/db.fit9135', '/etc/maradns/db.reverse', 'maradns.sh', )
	}
    }
    custom-config {
	custom-config-id service:maradns:maradns.sh
	custom-command maradns.sh
	config {
	#!/bin/sh
	# auto-generated for maradns
	maradns -f /etc/maradns/mararc
	}
    }
    custom-config {
	custom-config-id service:maradns:/etc/maradns/db.reverse
	custom-command /etc/maradns/db.reverse
	config {
	12.82.189.175.in-addr.arpa. PTR intranet.fit9135. ~
	11.3.189.175.in-addr.arpa. PTR www.fit9135. ~
	175.189.3.10.in-addr.arpa. PTR ssh.fit9135. ~
	
	}
    }
    custom-config {
	custom-config-id service:maradns:/etc/maradns/db.fit9135
	custom-command /etc/maradns/db.fit9135
	config {
	intranet.fit9135. 175.189.82.12 ~
	www.fit9135. 175.189.3.11 ~
	ssh.fit9135. 175.189.3.10 ~
	
	}
    }
    custom-config {
	custom-config-id service:maradns:/etc/maradns/mararc
	custom-command /etc/maradns/mararc
	config {
	ipv4_bind_addresses = "175.189.3.12/24"
	
	chroot_dir = "/etc/maradns"
	csv2 = {}
	csv2["fit9135."] = "db.fit9135"
	csv2["0.10.in-addr.arpa."] = "db.reverse"
	
	}
    }
    services {DefaultRoute SSH maradns}
    interface-peer {eth0 n2}
}

node n25 {
    type router
    model static
    network-config {
	hostname R3
	!
	interface eth4
	 ip address 175.189.40.1/24
	!
	interface eth1
	 ip address 175.189.43.2/24
	!
	interface eth2
	 ip address 175.189.21.2/24
	!
	interface eth3
	 ip address 175.189.3.1/24
	!
	interface eth0
	 ip address 175.189.70.1/24
	!
    }
    canvas c1
    iconcoords {671.915076891 312.26899454766664}
    labelcoords {692.484280401 336.7824167276667}
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	files=('firewall.sh', )
	}
    }
    custom-config {
	custom-config-id service:Firewall:firewall.sh
	custom-command firewall.sh
	config {
	#!/bin/sh
	# Setting up our router firewall
	# Flush all firewall rules
	# This deletes all previously set rules, so that this script can run from a clean start
	iptables -F
	# Set default policy: drop all packets
	# This means that the firewall blocks all traffic
	iptables -P INPUT DROP
	iptables -P OUTPUT DROP
	iptables -P FORWARD DROP
	
	#A.1 : Any packets for the specific servers in the  DMZ are accepted (HTTP)
	
	iptables -A FORWARD -o eth3 -d 175.189.3.11 -p tcp --destination-port 80 -j ACCEPT
	iptables -A FORWARD -i eth3 -s 175.189.3.11 -p tcp --source-port 80 -j ACCEPT
	
	#A.2 : Any packets for the specific servers in the  DMZ are accepted (SSH)
	
	iptables -A FORWARD -o eth3 -d 175.189.3.10 -p tcp --destination-port 22 -j ACCEPT
	iptables -A FORWARD -i eth3 -s 175.189.3.10 -p tcp --source-port 22 -j ACCEPT
	
	#A.3 : Any packets for the specific servers in the  DMZ are accepted (DNS)
	
	iptables -A FORWARD -o eth3 -d 175.189.3.12 -p udp --destination-port 53 -j ACCEPT
	iptables -A FORWARD -i eth3 -s 175.189.3.12 -p udp --source-port 53 -j ACCEPT
	
	#A.4 : Any packets for the specific servers in the  DMZ are accepted (ICMP)
	
	iptables -A FORWARD -o eth3 -p icmp --icmp-type 8 -j ACCEPT
	iptables -A FORWARD -i eth3 -p icmp --icmp-type 0 -j ACCEPT
	
	#Part B: Any packets from inside the company network are accepted.
	
	iptables -A FORWARD -i eth0 -j ACCEPT
	iptables -A FORWARD -i eth1 -j ACCEPT
	iptables -A FORWARD -i eth2 -j ACCEPT
	
	
	#Part C: Any packets relating to connections that were established from inside the company network are accepted. 
	
	iptables -A FORWARD -o eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A FORWARD -o eth1 -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A FORWARD -o eth2 -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	#Part D: Any SSH packets from the ssh server into the company network are accepted. 
	
	iptables -A FORWARD -i eth3 -o eth1 -s 175.189.3.10 -p tcp --destination-port 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	iptables -A FORWARD -i eth1 -o eth3 -d 175.189.3.10 -p tcp --source-port 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	iptables -A FORWARD -i eth3 -o eth2 -s 175.189.3.10 -p tcp --destination-port 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	iptables -A FORWARD -i eth2 -o eth3 -d 175.189.3.10 -p tcp --source-port 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	iptables -A FORWARD -i eth3 -o eth0 -s 175.189.3.10 -p tcp --destination-port 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	iptables -A FORWARD -i eth0 -o eth3 -d 175.189.3.10 -p tcp --source-port 22 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	
	
	
	
	
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	# /sbin/ip route add XXXX via YYYY
	
	ip route add 175.189.82.0/24 via 175.189.21.1
	ip route add 175.189.5.0/24 via 175.189.70.2
	ip route add 192.168.192.0/20 via 175.189.40.2
	
	}
    }
    services {IPForward StaticRoute Firewall}
    interface-peer {eth0 n8}
    interface-peer {eth3 n2}
    interface-peer {eth2 n5}
    interface-peer {eth1 n1}
    interface-peer {eth4 n14}
}

node n18 {
    type router
    model host
    network-config {
	hostname intranet
	!
	interface eth0
	 ip address 175.189.82.12/24
	!
    }
    canvas c1
    iconcoords {489.324504539 777.63693725}
    labelcoords {509.893708049 802.15035943}
    services {DefaultRoute SSH HTTP}
    interface-peer {eth0 n7}
    custom-config {
	custom-config-id service:HTTP
	custom-command HTTP
	config {
	dirs=('/etc/apache2', '/var/run/apache2', '/var/log/apache2', '/var/lock/apache2', '/var/www', '/run/lock', )
	files=('/etc/apache2/apache2.conf', '/etc/apache2/envvars', '/var/www/index.html', )
	}
    }
    custom-config {
	custom-config-id service:HTTP:/var/www/index.html
	custom-command /var/www/index.html
	config {
	<html><body><!-- generated by utility.py:HttpService -->
	<h1>FIT9135 intranet web server</h1>
	<p>Congratulations! You have reached the intranet web server.</p>
	</body></html>
	}
    }
}

node n19 {
    type router
    model host
    network-config {
	hostname www
	!
	interface eth0
	 ip address 175.189.3.11/24
	!
    }
    canvas c1
    iconcoords {747.517245692 609.287573082}
    labelcoords {768.086449202 633.800995262}
    custom-config {
	custom-config-id service:HTTP
	custom-command HTTP
	config {
	dirs=('/etc/apache2', '/var/run/apache2', '/var/log/apache2', '/var/lock/apache2', '/var/www', '/run/lock', )
	files=('/etc/apache2/apache2.conf', '/etc/apache2/envvars', '/var/www/index.html', )
	}
    }
    custom-config {
	custom-config-id service:HTTP:/var/www/index.html
	custom-command /var/www/index.html
	config {
	<html><body><!-- generated by utility.py:HttpService -->
	<h1>Congratulations! You have reached the web server</h1>
	</body></html>
	}
    }
    services {DefaultRoute SSH HTTP}
    interface-peer {eth0 n2}
}

node n8 {
    type router
    model static
    network-config {
	hostname R4
	!
	interface eth3
	 ip address 175.189.70.2/24
	!
	interface eth0
	 ip address 175.189.75.2/24
	!
	interface eth2
	 ip address 175.189.48.1/24
	!
	interface eth1
	 ip address 175.189.65.1/24
	!
    }
    canvas c1
    iconcoords {313.3021660266666 387.99059492099997}
    labelcoords {333.8713695366667 412.5040171}
    interface-peer {eth0 n1}
    interface-peer {eth3 n25}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	# To make R3 as gateway router
	ip route add default via 175.189.70.1
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	# /sbin/ip route add XXXX via YYYY
	
	ip route add 175.189.3.0/24 via 175.189.70.1
	ip route add 175.189.82.0/24 via 175.189.70.1
	ip route add 175.189.5.0/24 via 175.189.75.1
	}
    }
    services {IPForward DefaultRoute StaticRoute}
    interface-peer {eth1 n5}
    interface-peer {eth2 n3}
}

node n2 {
    type lanswitch
    network-config {
	hostname switch4
	!
    }
    canvas c1
    iconcoords {665.064800481 462.57962985733326}
    labelcoords {680.491703113 480.9646964923333}
    interface-peer {e0 n25}
    interface-peer {e2 n19}
    interface-peer {e1 n9}
    interface-peer {e3 n24}
}

node n9 {
    type router
    model host
    network-config {
	hostname ssh
	!
	interface eth0
	 ip address 175.189.3.10/24
	!
    }
    canvas c1
    iconcoords {887.017927526 515.4655293430001}
    labelcoords {907.587131036 539.978951522}
    services {DefaultRoute SSH}
    interface-peer {eth0 n2}
}

node n3 {
    type lanswitch
    network-config {
	hostname switch2
	!
    }
    canvas c1
    iconcoords {140.86914630933333 479.76211528}
    labelcoords {124.98498016433332 515.282437152}
    interface-peer {e0 n8}
    interface-peer {e1 n4}
}

node n4 {
    type router
    model host
    network-config {
	hostname backup
	!
	interface eth0
	 ip address 175.189.48.10/24
	!
    }
    canvas c1
    iconcoords {102.46247997403333 605.957873221}
    labelcoords {104.40010318233332 648.715862139}
    interface-peer {eth0 n3}
}

node n14 {
    type router
    model static
    network-config {
	hostname external
	!
	interface eth1
	 ip address 175.189.40.2/24
	!
	interface eth0
	 ip address 192.168.192.1/20
	!
    }
    canvas c1
    iconcoords {812.26312583 231.0834575836667}
    labelcoords {832.83232934 255.59687976366672}
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	dirs=('/etc/dhcp', '/var/lib/dhcp', )
	files=('/etc/dhcp/dhcpd.conf', '/var/lib/dhcp/dhcpd.leases', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/var/lib/dhcp/dhcpd.leases
	custom-command /var/lib/dhcp/dhcpd.leases
	config {
	
	
	
	
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	subnet 192.168.192.0 netmask 255.255.240.0 {
	  pool {
	    range 192.168.192.2 192.168.207.254;
	    default-lease-time 600;
	    option routers 192.168.192.1;
	    option domain-name "fit9135";
	    option domain-name-servers 175.189.3.12;
	  }
	}
	
	
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	# to make R3 as default gateway
	ip route add default via 175.189.40.1
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	
	ip route add 175.189.3.0/24 via 175.189.40.1
	ip route add 175.189.5.0/24 via 175.189.40.1
	ip route add 175.189.82.0/24 via 175.189.40.1
	
	}
    }
    services {IPForward DefaultRoute StaticRoute DHCP}
    interface-peer {eth0 n15}
    interface-peer {eth1 n25}
}

node n15 {
    type lanswitch
    network-config {
	hostname n15
	!
    }
    canvas c1
    iconcoords {804.0 139.0}
    labelcoords {804.0 163.0}
    interface-peer {e3 n14}
    interface-peer {e0 n16}
    interface-peer {e1 n17}
    interface-peer {e2 n20}
}

node n16 {
    type router
    model PC
    network-config {
	hostname exclient1
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {658.0 113.0}
    labelcoords {658.0 145.0}
    interface-peer {eth0 n15}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    services {DefaultRoute DHCPClient}
}

node n17 {
    type router
    model PC
    network-config {
	hostname exclient2
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {743.0 72.0}
    labelcoords {743.0 104.0}
    interface-peer {eth0 n15}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    services {DefaultRoute DHCPClient}
}

node n20 {
    type router
    model PC
    network-config {
	hostname exclient3
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {889.0 121.0}
    labelcoords {889.0 153.0}
    interface-peer {eth0 n15}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    services {DefaultRoute DHCPClient}
}

link l5 {
    nodes {n6 n1}
    bandwidth 0
}

link l7 {
    nodes {n11 n6}
    bandwidth 0
}

link l9 {
    nodes {n10 n6}
    bandwidth 0
}

link l8 {
    nodes {n12 n6}
    bandwidth 0
}

link l10 {
    nodes {n13 n6}
    bandwidth 0
}

link l13 {
    nodes {n18 n7}
}

link l15 {
    delay 100
    bandwidth 1000000000
    nodes {n1 n8}
}

link l18 {
    delay 100
    nodes {n25 n8}
    bandwidth 1000000000
}

link l6 {
    nodes {n7 n5}
}

link l1 {
    nodes {n25 n2}
}

link l12 {
    nodes {n19 n2}
}

link l3 {
    delay 100
    nodes {n5 n25}
    bandwidth 1000000000
}

link l19 {
    nodes {n9 n2}
}

link l11 {
    nodes {n2 n24}
}

link l16 {
    delay 110
    nodes {n8 n5}
    bandwidth 100000000
}

link l2 {
    delay 110
    nodes {n1 n25}
    bandwidth 100000000
}

link l4 {
    nodes {n8 n3}
    bandwidth 0
}

link l14 {
    nodes {n3 n4}
    bandwidth 0
}

link l22 {
    nodes {n15 n14}
    bandwidth 0
}

link l17 {
    nodes {n16 n15}
    bandwidth 0
}

link l20 {
    nodes {n17 n15}
    bandwidth 0
}

link l21 {
    nodes {n20 n15}
    bandwidth 0
}

link l23 {
    nodes {n25 n14}
    bandwidth 0
}

annotation a1 {
    iconcoords {719.6666666666666 33.66666666666667}
    type text
    label {Student ID: 30270111}
    labelcolor black
    fontfamily {Arial}
    fontsize {14}
    effects {bold}
    canvas c1
}

annotation a2 {
    iconcoords {564 403 918 752}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {827.0 720.0}
    type text
    label {DMZ}
    labelcolor #00b900
    fontfamily {Arial}
    fontsize {20}
    canvas c1
}

annotation a4 {
    type text
    iconcoords {736.0 706.0}
    label {}
    canvas c1
}

annotation a5 {
    type text
    iconcoords {781.0 715.0}
    label {}
    canvas c1
}

annotation a6 {
    iconcoords {597.0 47.0 926.0 275.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a7 {
    iconcoords {832.0 65.0}
    type text
    label {Extarnal}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

annotation a8 {
    type text
    iconcoords {836.0 84.0}
    label {}
    canvas c1
}

annotation a9 {
    type text
    iconcoords {673.0 312.0}
    label {}
    canvas c1
}

canvas c1 {
    name {Assignment2}
    size {1000 852.15035943}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 1
}

option session {
    controlnet=
    enablerj45=0
    enablesdt=0
    preservedir=0
}

