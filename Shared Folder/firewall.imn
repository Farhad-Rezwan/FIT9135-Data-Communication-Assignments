node n1 {
    type router
    model router
    network-config {
	hostname Firewall
	!
	interface eth2
	 ip address 10.0.2.1/24
	!
	interface eth1
	 ip address 10.0.1.1/24
	!
	interface eth0
	 ip address 10.0.0.1/24
	!
    }
    canvas c1
    iconcoords {684.0 180.0}
    labelcoords {684.0 212.0}
    interface-peer {eth0 n5}
    interface-peer {eth1 n6}
    interface-peer {eth2 n2}
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	dirs=('/etc/dhcp', '/var/lib/dhcp', )
	files=('/etc/dhcp/dhcpd.conf', )
	cmdup=('touch /var/lib/dhcp/dhcpd.leases', 'dhcpd', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	# auto-generated by DHCP service (utility.py)
	# NOTE: move these option lines into the desired pool { } block(s) below
	#option domain-name "test.com";
	#option domain-name-servers 10.0.0.1;
	#option routers 10.0.0.1;
	
	log-facility local6;
	
	default-lease-time 600;
	max-lease-time 7200;
	
	ddns-update-style none;
	
	subnet 10.0.0.0 netmask 255.255.255.0 {
	  pool {
	    range 10.0.0.127 10.0.0.254;
	    default-lease-time 600;
	    option routers 10.0.0.1;
	    option domain-name-servers 10.0.1.12;
	  }
	}
	
	
	subnet 10.0.1.0 netmask 255.255.255.0 {
	  pool {
	    range 10.0.1.127 10.0.1.254;
	    default-lease-time 600;
	    option routers 10.0.1.1;
	  }
	}
	
	
	subnet 10.0.2.0 netmask 255.255.255.0 {
	  pool {
	    range 10.0.2.127 10.0.2.254;
	    default-lease-time 600;
	    option routers 10.0.2.1;
	  }
	}
	
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 10.0.0.1
	#ip route add default via 10.0.1.1
	#ip route add default via 10.0.2.1
	ip route add default via 10.0.2.2
	
	}
    }
    services {IPForward DefaultRoute DHCP}
}

node n2 {
    type router
    model router
    network-config {
	hostname n2
	!
	interface eth2
	 ip address 10.0.4.1/24
	!
	interface eth0
	 ip address 10.0.2.2/24
	!
    }
    canvas c1
    iconcoords {450.0 188.0}
    labelcoords {450.0 220.0}
    interface-peer {eth0 n1}
    interface-peer {eth2 n3}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 10.0.2.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.3.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.4.1
	/sbin/ip route add 172.16.2.0/24 via 10.0.4.2
	/sbin/ip route add 172.16.1.0/24 via 10.0.4.2
	/sbin/ip route add 192.168.2.0/24 via 10.0.3.2
	/sbin/ip route add 192.168.3.0/24 via 10.0.3.2
	/sbin/ip route add 10.0.0.0/24 via 10.0.2.1
	/sbin/ip route add 10.0.1.0/24 via 10.0.2.1
	}
    }
    services {IPForward StaticRoute}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth2
	 ip address 172.16.2.1/24
	!
	interface eth1
	 ip address 172.16.1.1/24
	!
	interface eth0
	 ip address 10.0.4.2/24
	!
    }
    canvas c1
    iconcoords {257.0 188.0}
    labelcoords {257.0 220.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n9}
    interface-peer {eth2 n10}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 10.0.4.1
	#ip route add default via 172.16.1.1
	#ip route add default via 172.16.2.1
	ip route add default via 10.0.4.1
	}
    }
    services {IPForward DefaultRoute}
}

node n5 {
    type lanswitch
    network-config {
	hostname n5
	!
    }
    canvas c1
    iconcoords {796.0 177.0}
    labelcoords {796.0 201.0}
    interface-peer {e0 n1}
    interface-peer {e1 n11}
    interface-peer {e2 n12}
}

node n6 {
    type lanswitch
    network-config {
	hostname n6
	!
    }
    canvas c1
    iconcoords {687.0 283.0}
    labelcoords {687.0 307.0}
    interface-peer {e0 n1}
    interface-peer {e1 n15}
    interface-peer {e2 n16}
    interface-peer {e4 n7}
    interface-peer {e3 n4}
}

node n9 {
    type lanswitch
    network-config {
	hostname n9
	!
    }
    canvas c1
    iconcoords {171.0 338.0}
    labelcoords {171.0 362.0}
    interface-peer {e0 n3}
    interface-peer {e1 n14}
}

node n10 {
    type lanswitch
    network-config {
	hostname n10
	!
    }
    canvas c1
    iconcoords {171.0 78.0}
    labelcoords {171.0 102.0}
    interface-peer {e0 n3}
    interface-peer {e1 n19}
}

node n11 {
    type router
    model PC
    network-config {
	hostname n11
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {879.0 109.0}
    labelcoords {879.0 141.0}
    interface-peer {eth0 n5}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    services {DefaultRoute DHCPClient}
}

node n12 {
    type router
    model PC
    network-config {
	hostname n12
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {883.0 237.0}
    labelcoords {883.0 269.0}
    interface-peer {eth0 n5}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	
	}
    }
    services {DefaultRoute DHCPClient}
}

node n14 {
    type router
    model PC
    network-config {
	hostname n14
	!
	interface eth0
	 ip address 172.16.1.20/24
	!
    }
    canvas c1
    iconcoords {45.0 336.0}
    labelcoords {45.0 368.0}
    interface-peer {eth0 n9}
}

node n15 {
    type router
    model host
    network-config {
	hostname Web
	!
	interface eth0
	 ip address 10.0.1.10/24
	!
    }
    canvas c1
    iconcoords {595.0 457.0}
    labelcoords {595.0 489.0}
    interface-peer {eth0 n6}
    custom-config {
	custom-config-id service:HTTP
	custom-command HTTP
	config {
	dirs=('/etc/apache2', '/var/run/apache2', '/var/log/apache2', '/var/lock/apache2', '/var/www', '/run/lock', )
	files=('/etc/apache2/apache2.conf', '/etc/apache2/envvars', '/var/www/index.html', )
	}
    }
    custom-config {
	custom-config-id service:HTTP:/var/www/index.html
	custom-command /var/www/index.html
	config {
	<html><body><!-- generated by utility.py:HttpService -->
	<h1>Phoenix Corporation web server</h1>
	<p>This is the default web page for this server.</p>
	<p>The web server software is running but no content has been added, yet.</p>
	<li>eth0 - ['10.0.1.10/24']</li>
	</body></html>
	}
    }
    services {DefaultRoute SSH HTTP}
}

node n16 {
    type router
    model host
    network-config {
	hostname SSH
	!
	interface eth0
	 ip address 10.0.1.11/24
	!
    }
    canvas c1
    iconcoords {790.0 409.0}
    labelcoords {790.0 441.0}
    interface-peer {eth0 n6}
}

node n19 {
    type router
    model host
    network-config {
	hostname ExternalWeb
	!
	interface eth0
	 ip address 172.16.2.10/24
	!
    }
    canvas c1
    iconcoords {48.0 79.0}
    labelcoords {48.0 111.0}
    interface-peer {eth0 n10}
    custom-config {
	custom-config-id service:HTTP
	custom-command HTTP
	config {
	dirs=('/etc/apache2', '/var/run/apache2', '/var/log/apache2', '/var/lock/apache2', '/var/www', '/run/lock', )
	files=('/etc/apache2/apache2.conf', '/etc/apache2/envvars', '/var/www/index.html', )
	}
    }
    custom-config {
	custom-config-id service:HTTP:/var/www/index.html
	custom-command /var/www/index.html
	config {
	<html><body><!-- generated by utility.py:HttpService -->
	<h1>Some External Web Server</h1>
	<p>If you’re going to try, go all the way.
	otherwise, don’t even start.
	</p>
	<p>The web server software is running but no content has been added, yet.</p>
	<li>eth0 - ['172.16.2.10/24']</li>
	</body></html>
	}
    }
    services {DefaultRoute SSH HTTP}
}

node n7 {
    type router
    model host
    network-config {
	hostname mail
	!
	interface eth0
	 ip address 10.0.1.13/24
	!
    }
    canvas c1
    iconcoords {690.0 465.0}
    labelcoords {690.0 497.0}
    interface-peer {eth0 n6}
    custom-config {
	custom-config-id service:postfix
	custom-command postfix
	config {
	files=('postfix.sh', )
	cmddown=('postfix stop', )
	}
    }
    custom-config {
	custom-config-id service:postfix:postfix.sh
	custom-command postfix.sh
	config {
	#!/bin/sh
	# auto-generated for postfix
	
	# uncomment and modify the configuration parameters according to your setup
	
	cp -R /etc/postfix.d/* /etc/postfix
	
	postconf -e "myhostname=mail"
	postconf -e "mydomain=argos.com"
	
	postconf -e "myorigin=argos.com"
	
	postconf -e "mydestination=mail, localhost, mail.argos.com, argos.com"
	
	postconf -e "mynetworks=127.0.0.0/8 10.0.1.0/24 10.0.0.0/24"
	postconf -e "mynetworks_style=subnet"
	postconf -e "inet_interfaces=127.0.0.1, 10.0.1.13"
	postconf -e "inet_protocols=ipv4"
	
	#for simplicity the TLS is disabled, always use TLS in practice for security
	postconf -e "smtp_use_tls=no"
	postfix start
	}
    }
    custom-config {
	custom-config-id service:resolvconf
	custom-command resolvconf
	config {
	files=('resolvconf.sh', )
	cmdup=('sh resolvconf.sh', )
	}
    }
    custom-config {
	custom-config-id service:resolvconf:resolvconf.sh
	custom-command resolvconf.sh
	config {
	# Add your name servers accordingly and uncomment both lines
	#Do not use with DHCPClient if DHCP server specifies DNS address
	mkdir -p /var/run/resolvconf
	echo "nameserver 10.0.1.12" > /var/run/resolvconf/resolv.conf
	}
    }
    services {DefaultRoute SSH postfix resolvconf}
}

node n4 {
    type router
    model host
    network-config {
	hostname nsArgos
	!
	interface eth0
	 ip address 10.0.1.12/24
	!
    }
    canvas c1
    iconcoords {539.0 371.0}
    labelcoords {539.0 403.0}
    interface-peer {eth0 n6}
    custom-config {
	custom-config-id service:maradns
	custom-command maradns
	config {
	files=('/etc/maradns.d/mararc', 'maradns.sh', '/etc/maradns.d/db.argos.com', )
	}
    }
    custom-config {
	custom-config-id service:maradns:/etc/maradns.d/db.argos.com
	custom-command /etc/maradns.d/db.argos.com
	config {
	argos.com. 10.0.1.12 ~
	ns.argos.com. 10.0.1.12 ~
	www.argos.com. 10.0.1.10 ~
	ssh.argos.com. 10.0.1.11 ~
	mail.argos.com. 10.0.1.13 ~
	argos.com. MX 10 mail.argos.com. ~
	mail.argos.com. MX 10 mail.argos.com. ~
	}
    }
    custom-config {
	custom-config-id service:maradns:/etc/maradns.d/mararc
	custom-command /etc/maradns.d/mararc
	config {
	# Example mararc file
	
	# The address this DNS server runs on.  If you want to bind
	# to multiple addresses, separate them with a comma like this:
	# "10.1.2.3,10.1.2.4,127.0.0.1"
	# any configuration must have at least the following four lines:
	
	ipv4_bind_addresses = "10.0.1.12,127.0.0.1"
	chroot_dir = "/etc/maradns.d"
	csv2 = {}
	csv2["argos.com."] = "db.argos.com"
	
	# then create the zone file db.example.com in /etc/maradns.d folder
	# that will contain the dns records
	 
	            
	}
    }
    services {DefaultRoute SSH maradns}
}

link l1 {
    nodes {n1 n5}
    bandwidth 0
}

link l2 {
    nodes {n5 n11}
    bandwidth 0
}

link l3 {
    nodes {n5 n12}
    bandwidth 0
}

link l4 {
    nodes {n1 n6}
    bandwidth 0
}

link l5 {
    nodes {n6 n15}
    bandwidth 0
}

link l6 {
    nodes {n6 n16}
    bandwidth 0
}

link l8 {
    nodes {n1 n2}
    bandwidth 0
}

link l10 {
    nodes {n2 n3}
    bandwidth 0
}

link l15 {
    nodes {n3 n9}
    bandwidth 0
}

link l16 {
    nodes {n3 n10}
    bandwidth 0
}

link l17 {
    nodes {n10 n19}
    bandwidth 0
}

link l18 {
    nodes {n9 n14}
    bandwidth 0
}

link l9 {
    nodes {n7 n6}
    bandwidth 0
}

link l7 {
    nodes {n4 n6}
    bandwidth 0
}

annotation a1 {
    iconcoords {764.0 50.0 926.0 307.0}
    type rectangle
    label {Local Clients}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {505.0 336.0 846.0 505.0}
    type rectangle
    label {DMZ}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names yes
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

